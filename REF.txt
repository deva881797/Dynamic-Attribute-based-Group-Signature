01. REF-01 : mpz_t
    Data type offered by GMP library for storing large integers.

02. REF-02 : void mpz_init (mpz_t x) or mpz_inits(x1, x2, NULL):
   		Implemented by the GMP library, the function initializes the variable passed and sets its value to 0
       	Pseudo code for self-implementation (instead of using mpz_init(mpz_t x)):
   	    	x = 0;

03. REF-03 : void mpz_set_ui (mpz_t rop, unsigned long int op):
        Implemented by the GMP library, the function sets the first parameter to the value of second parameter op
        Pseudo code for self-implementation (instead of using mpz_set_ui(mpz_t rop, unsigned long int op)):
        	rop = op;

04. REF-04 : gmp_randstate_t
  	    Random state means an algorithm selection and current state data. The data type (provided by gmp library) for
  	    such objects is gmp_randstate_t. For example: gmp_randstate_t rstate;

05. REF-05 : void gmp_randinit_default (gmp_randstate_t state)
        Function provided by gmp library that initializes the state variable with a default algorithm.

06. REF-06 : void gmp_randseed_ui (gmp_randstate_t state, unsigned long int seed)
        Function provided by gmp library to set an initial seed value into state.

07. REF-07 : int mpz_cmp_ui (const mpz_t op1, unsigned long int op2)
        Function provided by GMP library to compare op1 and op2.
        It returns a positive value if op1 > op2, zero if op1 == op2, or a negative value if op1 < op2.

08. REF-08 : void mpz_ui_pow_ui (mpz_t rop, unsigned long int base, unsigned long int exp)
		Function provided by gmp library to set rop to base^exp. According to the manual, 0^0 returns 1.

09. REF-09 : unsigned long int mpz_get_ui (const mpz t op)
		Provided by gmp library, it returns the value of op as an unsigned long.

10. REF-10 : void mpz_urandomb (mpz_t rop, gmp_randstate_t state, mp bitcnt t n)
        Function provided by gmp library to generate a uniformly distributed random integer in the range 0 to 2^n − 1,
        inclusive.

11. REF-11 : int mpz_cmp (const mpz_t op1, const mpz_t op2)
        Function provided by GMP library to compare op1 and op2.
        It returns a positive value if op1 > op2, zero if op1 == op2, or a negative value if op1 < op2.

12. REF-12 : int mpz_probab_prime_p (const mpz_t n, int reps)
        Function provided by gmp library to check if n is prime. Returns 2 if n is definitely prime, returns 1 if n is
        probably prime (without being certain), or return 0 if n is definitely composite.
        About the argument reps: It controls how many such tests are done. Larger value of reps will reduce the chances
        of a composite being returned as probably prime.

13. REF-13 : void mpz_set(mpz_t a, mpz_t b)
        The function (provided by GMP library) is used to set the value of an equal to the value of b.
        Pseudocode for self-implementation (i.e. without using predefined function):
            b = a;

14. REF-14 : gmp_printf(const char *fmt, …)
        Print to the standard output stdout. Return the number of characters written, or -1 if an error occurred.

15. REF-15 : pairing_t
        pairing_t is a data type offered by pbc library, that stores the bilinear pairings.

16. REF-16 : pbc_param_t
        Data type offered by pbc library to generate/store pairing parameters

17. REF-17 : void pbc_param_init_a1_gen(pbc_param_t param, mpz_t n)
        Function provided by pbc library.
        According to pbc manual, it generate type A1 pairing parameters and store them in param.

18. REF-18 : void pairing_init_pbc_param(pairing, pbc_param_t p)
        Function provided by pbc library.
        According to PBC manual, it initializes a pairing (to be directly used for generating groups etc.) with pairing
         parameters p.

19. REF-19 : void element_init_G1(element_t e, pairing_t pairing)
        The function initializes e to be an element of the group G1 of the pairing.
        When an element is initialized it is associated with an algebraic structure, such as a particular finite field
         or elliptic curve group.

20. REF-20 : void element_init_G2(element_t e, pairing_t pairing)
        The function initializes e to be an element of the group G2 of the pairing similar to REF-19.

21. REF-21 : void element_init_G2(element_t e, pairing_t pairing)
        The function initializes e to be an element of the group GT of the pairing similar to REF-19.

22. REF-22 : void element_set0(element_t e)
        For groups of points on an ellitpic curve, such as the G1 and G2 groups associated with pairings, both 0 and 1
         represent the identity element.
        Hence, setting element to 0 means setting element to identity element of G1/G2.

23. REF-23 : void mpz_add_ui (mpz_t rop, const mpz_t op1, unsigned long int op2)
        Set rop to op1 + op2.

24. REF-24 : void element_random(element_t e)
        Function provided by pbc library, it assigns a uniformly random element to e (as e lies in a group).

25. REF-25 : void element_pow_mpz(element_t rop, element_t e, mpz_t a)
        Provided by pbc library
        Computes e^a and assigns to rop. Here, e is element of group (or any other structure
        i.e. of type element_t) and a is of type mpz_t.

26. REF-26 : int element_cmp(element_t a, element_t b)
        Provided by pbc library
        Returns 0 if a and b are the same, nonzero otherwise.

27. REF-27 : void element_set(element_t e, element_t a)
        Provided by pbc library
        Set e to a.

28. REF-28 :






